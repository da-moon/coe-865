#!/usr/bin/env bash

# shellcheck source=./lib/env/env.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/env/env.sh"
# shellcheck source=./lib/log/log.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/log/log.sh"
# shellcheck source=./lib/lab1/lab1.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/lab1/lab1.sh"
# shellcheck source=./lib/assert/assert.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/assert/assert.sh"
# shellcheck source=./lib/io/io.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/io/io.sh"
# shellcheck source=./lib/array/array.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/array/array.sh"

function lab1_help() {

    echo
    echo "Usage: [network lab1 | network_lab1] [OPTIONAL ARG] [COMMAND | COMMAND <FLAG> <ARG>]"
    echo
    echo
    echo -e "[Synopsis]:\tDemo for lab1."
    echo
    echo "Commands:"
    echo
    echo -e "  generate-random-interface-config\t\tConfigures interfaces with random ip per"
    echo -e "  \t\t\t\t\t-[arg]<cidr> cidr for ip addresses."
    echo -e "  \t\t\t\t\t-[flag|optional] <path> generates configuration script."
    echo -e "  \t\t\t\t\tand stores it at given <path>."
    echo -e "  \t\t\t\t\tBy default it is stored at $HOME/IPaddr.exec"
    echo -e "  generate-interface-config\t\tConfigures interfaces with ip per lab1(a) instructions"
    echo -e "  \t\t\t\t\t-[arg]<machnie-number> machine number to generate configuartion for."
    echo -e "  \t\t\t\t\t-[flag|optional] <path> generates configuration script."
    echo -e "  \t\t\t\t\tand stores it at given <path>."
    echo -e "  \t\t\t\t\tBy default it is stored at $HOME/IPaddr.exec"
    echo -e "  generate-dns-zonefile\t\tGenerates a dns zonefile"
    echo -e "  list-routers\t\t\t\tlists routers and shows interface configuration"
    echo -e "  check-config\t\t\t\tChecks Configuration"
    echo -e "  interface-status\t\t\tShows network interfaces status"
    echo -e "  enable-ip-forwarding\t\t\tEnables ip forwarding "
    echo -e "  disable-ip-forwarding\t\t\tDisables ip forwarding"
    echo -e "  disable-interface\t\t\tDisables a network interface"
    echo -e "  \t\t\t\t\t-[arg]<name> target interface name"
    echo -e "  enable-interface\t\t\tEnables a network interface"
    echo -e "  \t\t\t\t\t-[arg]<name> target interface name"
    echo
    echo "Example:"
    echo
    echo "  network lab1 \\"
    echo "    generate-random-interface-config 10.1.1.0/24"
    echo
    echo "  network lab1 \\"
    echo "    interface-status"
    echo
    echo "  network lab1 \\"
    echo "    enable-ip-forwarding"
    echo
    echo "  network lab1 \\"
    echo "    enable-interface eth0"
    echo
}
function network_lab1() {
    if [[ $# == 0 ]]; then
        lab1_help
        exit 1
    fi
    while [[ $# -gt 0 ]]; do
        local key="$1"
        case "$key" in
        generate-random-interface-config)
            if [[ $# -gt 3 ]]; then
                lab1_help
                exit 1
            fi
            local target_path=$(pwd)/IPaddr.exec
            local net_id
            if [[ $# == 3 ]]; then
                if [[ "$2" != "--path" ]]; then
                    log_error "[$2] is an invalid flag. existing..."
                    exit 1
                fi
                target_path = "$2"
                net_id="$3"
            else
                net_id="$2"
            fi

            $(generate_config "$target_path" "$net_id" "3")

            shift
            exit
            ;;
        generate-interface-config)
            if [[ $# -gt 3 ]]; then
                lab1_help
                exit 1
            fi
            local target_path=$(pwd)/IPaddr.exec
            local machine_name
            if [[ $# == 3 ]]; then
                if [[ "$2" != "--path" ]]; then
                    log_error "[$2] is an invalid flag. existing..."
                    exit 1
                fi
                target_path = "$2"
                machine_name="$3"
            else
                machine_name="$2"
            fi
            case "$machine_name" in
            r9)
                gen_config_R9 "$target_path"
                chmod +x "$target_path"
                shift
                exit
                ;;
            r10)
                gen_config_R10 "$target_path"
                chmod +x "$target_path"
                shift
                exit
                ;;
            r11)
                gen_config_R11 "$target_path"
                chmod +x "$target_path"
                shift
                exit
                ;;
            r12)
                gen_config_R12 "$target_path"
                chmod +x "$target_path"
                shift
                exit
                ;;
            *)
                log_warn "at this point the script can't generate config file for "$machine_name""
                shift
                exit
                ;;
            esac

            $(generate_config "$target_path")

            shift
            exit
            ;;
        generate-dns-zonefile)
            generate_dns_zonefile
            shift
            exit
            ;;

        list-routers)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            list_router_information
            shift
            exit
            ;;
        check-config)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            check_configuration
            shift
            exit
            ;;

        interface-status)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            show_interface_status
            shift
            exit
            ;;
        enable-ip-forwarding)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            turn_on_ip_forwarding
            shift
            exit
            ;;
        disable-ip-forwarding)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            turn_off_ip_forwarding
            shift
            exit
            ;;
        disable-interface)
            if [[ $# != 2 ]]; then
                lab1_help
                exit 1
            fi
            local interface="$2"
            disable_network_interface "$interface"
            shift
            exit
            ;;
        enable-interface)
            if [[ $# != 2 ]]; then
                lab1_help
                exit 1
            fi
            local interface="$2"
            enable_network_interface "$interface"
            shift
            exit
            ;;
        --help)
            lab1_help
            exit
            ;;
        *)
            log_error "Unrecognized option: $key"
            echo -e "\t\t\t\tRun '$(basename "$0") --help' for a list of known subcommands." >&2
            exit 1
            ;;
        esac
        shift
    done
}
export -f network_lab1
network_lab1 "$@"

# ASSUME_YES="no"
# SILENT="no"

# ask_user "Private network name" "pnetwork" "$ASSUME_YES" "$SILENT" "PRIVATE_NET_NAME"
