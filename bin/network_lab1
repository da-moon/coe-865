#!/usr/bin/env bash

# shellcheck source=./lib/env/env.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/env/env.sh"
# shellcheck source=./lib/log/log.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/log/log.sh"
# shellcheck source=./lib/lab1/lab1.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/lab1/lab1.sh"
# shellcheck source=./lib/assert/assert.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/assert/assert.sh"
# shellcheck source=./lib/io/io.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/io/io.sh"
# shellcheck source=./lib/array/array.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/array/array.sh"

# Delete me

# shellcheck source=./lib/network/network.sh
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)/lib/network/network.sh"

function lab1_help() {

    echo
    echo "Usage: [network lab1 | network_lab1] [OPTIONAL ARG] [COMMAND | COMMAND <FLAG> <ARG>]"
    echo
    echo
    echo -e "[Synopsis]:\tDemo for lab1."
    echo
    echo "Commands:"
    echo
    echo -e "  generate-random-interface-config\t\tConfigures interfaces with random ip per"
    echo -e "  \t\t\t\t\t-[arg]<cidr> cidr for ip addresses."
    echo -e "  \t\t\t\t\t-[flag|optional] <path> generates configuration script."
    echo -e "  \t\t\t\t\tand stores it at given <path>."
    echo -e "  \t\t\t\t\tBy default it is stored at $HOME/IPaddr.exec"

    echo -e "  generate-interface-config\t\tConfigures interfaces with ip per lab1(a) instructions"
    echo -e "  \t\t\t\t\t-[arg]<machnie-number> machine number to generate configuartion for."
    echo -e "  \t\t\t\t\t-[flag|optional] <path> generates configuration script."
    echo -e "  \t\t\t\t\tand stores it at given <path>."
    echo -e "  \t\t\t\t\tBy default it is stored at $HOME/IPaddr.exec"

    echo -e "  setup-dns-server\t\tGenerates a dns zonefile and sets up dns server"
    echo -e "  \t\t\t\t\t-[flag] <zone> pass in dns zone name."
    echo -e "  \t\t\t\t\t-[flag] <server> pass in server ip address with netmask. eg 10.1.1.1/24"
    echo -e "  \t\t\t\t\t-[flag] <client> pass in client ip address."

    echo -e "  setup-dns-client\t\tGenerates a dns zonefile and sets up dns server"
    echo -e "  \t\t\t\t\t-[flag] <zone> pass in dns zone name."
    echo -e "  \t\t\t\t\t-[flag] <server> pass in server ip address . eg 10.1.1.1"

    echo -e "  setup-dhcp-server\t\tSets up dhcp server"
    echo -e "  \t\t\t\t\t-[flag] <interface> interface to set DHCPDARGS."
    echo -e "  \t\t\t\t\t-[flag] <server-interface> interface to run dhcp server."
    echo -e "  \t\t\t\t\t-[flag] <zone> dhcp server zone"
    echo -e "  \t\t\t\t\t-[flag] <start-range> pass starting point of dhcp ips."
    echo -e "  \t\t\t\t\t-[flag] <end-range> pass end point of dhcp ips."

    echo -e "  setup-dhcp-client\t\tSets up dhcp client"
    echo -e "  \t\t\t\t\t-[flag] <ip-addr> client ip address."
    echo -e "  \t\t\t\t\t-[flag] <interface> interface to set client ip address."

    echo -e "  list-routers\t\t\t\tlists routers and shows interface configuration"

    echo -e "  show-routing-table\t\t\t\tshows the routing table"

    echo -e "  check-config\t\t\t\tChecks Configuration"

    echo -e "  interface-status\t\t\tShows network interfaces status"

    echo -e "  enable-ip-forwarding\t\t\tEnables ip forwarding "

    echo -e "  disable-ip-forwarding\t\t\tDisables ip forwarding"

    echo -e "  disable-interface\t\t\tDisables a network interface"
    echo -e "  \t\t\t\t\t-[arg]<name> target interface name"

    echo -e "  enable-interface\t\t\tEnables a network interface"
    echo -e "  \t\t\t\t\t-[arg]<name> target interface name"
    echo
    echo "Example:"
    echo
    echo "  network lab1 \\"
    echo "    generate-random-interface-config 10.1.1.0/24"
    echo
    echo "  network lab1 \\"
    echo "    generate-interface-config r9"
    echo
    echo "  network lab1 \\"
    echo "    setup-dns-server \\"
    echo "    --zone galaxy.net \\"
    echo "    --server 10.3.4.2/24 \\"
    echo "    --client 10.3.4.1"
    echo
    echo "  network lab1 \\"
    echo "    setup-dns-client \\"
    echo "    --zone galaxy.net \\"
    echo "    --server 10.3.4.2"
    echo
    echo "  network lab1 \\"
    echo "    setup-dhcp-server \\"
    echo "    --interface eth0 \\"
    echo "    --server-interface eth1 \\"
    echo "    --zone galaxy.net \\"
    echo "    --start-range 10.1.1.10 \\"
    echo "    --end-range 10.1.1.20"
    echo
    echo "  network lab1 \\"
    echo "    setup-dhcp-client \\"
    echo "    --interface eth1 \\"
    echo "    --ip-addr 10.1.1.56"
    echo
    echo "  network lab1 \\"
    echo "    interface-status"
    echo
    echo "  network lab1 \\"
    echo "    enable-ip-forwarding"
    echo
    echo "  network lab1 \\"
    echo "    enable-interface eth0"
    echo
}
function network_lab1() {
    if [[ $# == 0 ]]; then
        lab1_help
        exit 1
    fi
    while [[ $# -gt 0 ]]; do
        local key="$1"
        case "$key" in
        generate-random-interface-config)
            if [[ $# -gt 3 ]]; then
                lab1_help
                exit 1
            fi
            local target_path=$(pwd)/IPaddr.exec
            local net_id
            if [[ $# == 3 ]]; then
                if [[ "$2" != "--path" ]]; then
                    log_error "[$2] is an invalid flag. existing..."
                    exit 1
                fi
                target_path = "$2"
                net_id="$3"
            else
                net_id="$2"
            fi

            $(generate_config "$target_path" "$net_id" "3")

            shift
            exit
            ;;
        setup-dns-server)

            local zone=""
            local server=""
            local client=""
            while [[ $# -gt 0 ]]; do
                local choice="$1"
                case "$choice" in
                --zone)
                    zone="$2"
                    shift
                    ;;
                --client)
                    client="$2"
                    shift
                    ;;
                --server)
                    server="$2"
                    shift
                    ;;
                *)
                    shift
                    ;;
                esac
            done
            assert_not_empty "zone" "$zone" "dns zone is needed"
            assert_not_empty "server" "$server" "server ip address and netmask is needed"
            assert_not_empty "client" "$client" "client ip address is needed"
            server_dns_setup "$zone" "$client" "$server"
            shift
            exit
            ;;
        setup-dns-client)

            local zone=""
            local server=""
            while [[ $# -gt 0 ]]; do
                local choice="$1"
                case "$choice" in
                --zone)
                    zone="$2"
                    shift
                    ;;
                --server)
                    server="$2"
                    shift
                    ;;
                *)
                    shift
                    ;;
                esac
            done
            assert_not_empty "zone" "$zone" "dns zone is needed"
            assert_not_empty "server" "$server" "server ip address and netmask is needed"
            client_dns_setup "$zone" "$server"
            shift
            exit
            ;;
        setup-dhcp-server)
            local interface=""
            local zone=""
            local start_range=""
            local end_range=""
            while [[ $# -gt 0 ]]; do
                local choice="$1"
                case "$choice" in
                --interface)
                    interface="$2"
                    shift
                    ;;
                --zone)
                    zone="$2"
                    shift
                    ;;
                --start-range)
                    start_range="$2"
                    shift
                    ;;
                --end-range)
                    end_range="$2"
                    shift
                    ;;
                *)
                    shift
                    ;;
                esac
            done
            assert_not_empty "interface" "$interface" "interface for dhcpd is needed"
            assert_not_empty "zone" "$zone" "interface for dhcpd is needed"
            assert_not_empty "start_range" "$start_range" "dhcp ip start range is needed"
            assert_not_empty "end_range" "$end_range" "dhcp ip end range is needed"

            set_dhcp_dargs "$interface"
            # sleep 5
            # log_info "restarting dhcpd service"
            # service dhcpd restart
            # sleep 5
            gen_dhcpd_conf "$interface" "$zone" "$start_range" "$end_range"
            log_info "Starting dhcp server at $interface"
            /usr/sbin/dhcpd "$interface"
            shift
            exit
            ;;
        setup-dhcp-client)
            local interface=""
            local ip_addr=""

            while [[ $# -gt 0 ]]; do
                local choice="$1"
                case "$choice" in
                --interface)
                    interface="$2"
                    shift
                    ;;
                --ip-addr)
                    ip_addr="$2"
                    shift
                    ;;

                *)
                    shift
                    ;;
                esac
            done
            assert_not_empty "interface" "$interface" "interface for dhcpd is needed"
            assert_not_empty "ip_addr" "$ip_addr" "client ip address is needed"
            start_dhcp_client "$interface" "$ip_addr"
            shift
            exit
            ;;
        generate-interface-config)
            if [[ $# -gt 3 ]]; then
                lab1_help
                exit 1
            fi
            local target_path=$(pwd)/IPaddr.exec
            local machine_name
            if [[ $# == 3 ]]; then
                if [[ "$2" != "--path" ]]; then
                    log_error "[$2] is an invalid flag. existing..."
                    exit 1
                fi
                target_path = "$2"
                machine_name="$3"
            else
                machine_name="$2"
            fi
            case "$machine_name" in
            r1)
                gen_config_R1 "$target_path"
                shift
                exit
                ;;
            r2)
                gen_config_R2 "$target_path"
                shift
                exit
                ;;
            r3)
                gen_config_R3 "$target_path"
                shift
                exit
                ;;
            r4)
                gen_config_R4 "$target_path"
                shift
                exit
                ;;
            r5)
                gen_config_R5 "$target_path"
                shift
                exit
                ;;
            r6)
                gen_config_R6 "$target_path"
                shift
                exit
                ;;
            r7)
                gen_config_R7 "$target_path"
                shift
                exit
                ;;
            r8)
                gen_config_R8 "$target_path"
                shift
                exit
                ;;
            r9)
                gen_config_R9 "$target_path"
                shift
                exit
                ;;
            r10)
                gen_config_R10 "$target_path"
                shift
                exit
                ;;
            r11)
                gen_config_R11 "$target_path"
                shift
                exit
                ;;
            r12)
                gen_config_R12 "$target_path"
                shift
                exit
                ;;
            r13)
                gen_config_R13 "$target_path"
                shift
                exit
                ;;
            r14)
                gen_config_R14 "$target_path"
                shift
                exit
                ;;
            r15)
                gen_config_R15 "$target_path"
                shift
                exit
                ;;
            r16)
                gen_config_R16 "$target_path"
                shift
                exit
                ;;
            r17)
                gen_config_R17 "$target_path"
                shift
                exit
                ;;
            r18)
                gen_config_R18 "$target_path"
                shift
                exit
                ;;
            r19)
                gen_config_R19 "$target_path"
                shift
                exit
                ;;
            r20)
                gen_config_R20 "$target_path"
                shift
                exit
                ;;
            *)
                log_warn "at this point the script can't generate config file for "$machine_name""
                shift
                exit
                ;;
            esac

            $(generate_config "$target_path")

            shift
            exit
            ;;
        generate-dns-zonefile)
            generate_dns_zonefile
            shift
            exit
            ;;
        list-routers)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            list_router_information
            shift
            exit
            ;;
        interface-status)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            show_interface_status
            shift
            exit
            ;;
        enable-ip-forwarding)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            turn_on_ip_forwarding
            shift
            exit
            ;;
        disable-ip-forwarding)
            if [[ $# != 1 ]]; then
                lab1_help
                exit 1
            fi
            turn_off_ip_forwarding
            shift
            exit
            ;;
        disable-interface)
            if [[ $# != 2 ]]; then
                lab1_help
                exit 1
            fi
            local interface="$2"
            disable_network_interface "$interface"
            shift
            exit
            ;;
        enable-interface)
            if [[ $# != 2 ]]; then
                lab1_help
                exit 1
            fi
            local interface="$2"
            enable_network_interface "$interface"
            shift
            exit
            ;;
        show-routing-table)
            show_routing_table
            shift
            exit
            ;;
        --help)
            lab1_help
            exit
            ;;
        *)
            log_error "Unrecognized option: $key"
            echo -e "\t\t\t\tRun '$(basename "$0") --help' for a list of known subcommands." >&2
            exit 1
            ;;
        esac
        shift
    done
}
export -f network_lab1
network_lab1 "$@"

# ASSUME_YES="no"
# SILENT="no"

# ask_user "Private network name" "pnetwork" "$ASSUME_YES" "$SILENT" "PRIVATE_NET_NAME"
